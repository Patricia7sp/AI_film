name: 🤖 Full Auto Colab Pipeline (100% Automated)

on:
  push:
    branches: [main, develop, automation-only]
  workflow_dispatch:
    inputs:
      force_colab_restart:
        description: 'Force Colab restart'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================
  # JOB 1: Automated Colab Orchestration
  # ============================================================
  orchestrate-colab:
    name: 🤖 Orchestrate Colab (Automated)
    runs-on: ubuntu-latest
    outputs:
      comfyui_url: ${{ steps.agent.outputs.comfyui_url }}
      colab_status: ${{ steps.agent.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install requests

      - name: 🤖 Run Colab Automation Agent
        id: agent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COLAB_NOTEBOOK_ID: ${{ secrets.COLAB_NOTEBOOK_ID }}
          COMFYUI_URL_GIST_ID: ${{ secrets.COMFYUI_URL_GIST_ID }}
          COLAB_TRIGGER_WEBHOOK: ${{ secrets.COLAB_TRIGGER_WEBHOOK }}
          COMFYUI_FALLBACK_URL: ${{ secrets.COMFYUI_FALLBACK_URL }}
        run: |
          echo "🤖 Iniciando Agente de Automação do Colab..."
          python .github/scripts/colab_automation_agent.py
          
          # Agente exporta URL automaticamente via GITHUB_OUTPUT
          echo "✅ Agente executado com sucesso!"

      - name: Verify URL captured
        run: |
          URL="${{ steps.agent.outputs.comfyui_url }}"
          echo "🔍 URL capturada: $URL"
          
          if [ -z "$URL" ]; then
            echo "❌ URL não foi capturada pelo agente"
            exit 1
          fi
          
          echo "✅ URL válida capturada!"
          
          # Salvar URL em arquivo para outros jobs
          echo "$URL" > comfyui_url.txt
      
      - name: Upload URL artifact
        uses: actions/upload-artifact@v4
        with:
          name: comfyui-url
          path: comfyui_url.txt
          retention-days: 1

  # ============================================================
  # JOB 2: Update Configuration (Automated)
  # ============================================================
  update-config:
    name: ⚙️ Update Configuration
    runs-on: ubuntu-latest
    needs: orchestrate-colab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download URL artifact
        uses: actions/download-artifact@v4
        with:
          name: comfyui-url

      - name: Update .env with Colab URL
        run: |
          URL=$(cat comfyui_url.txt)
          echo "📝 Atualizando configurações com URL: $URL"
          
          # Criar/atualizar .env
          echo "COMFYUI_URL=$URL" > .env.auto
          echo "COMFYUI_SOURCE=colab_automated" >> .env.auto
          echo "UPDATED_AT=$(date)" >> .env.auto
          
          echo "✅ Configurações atualizadas!"

  # ============================================================
  # JOB 3: Run Integration Tests (Automated)
  # ============================================================
  test-integration:
    name: 🧪 Run Integration Tests
    runs-on: ubuntu-latest
    needs: orchestrate-colab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download URL artifact
        uses: actions/download-artifact@v4
        with:
          name: comfyui-url

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install pytest requests

      - name: Test ComfyUI Integration
        run: |
          URL=$(cat comfyui_url.txt)
          echo "🧪 Testando integração com ComfyUI..."
          echo "URL: $URL"
          
          # Criar teste
          cat > test_comfyui_auto.py << 'EOF'
          import sys
          import requests

          def test_comfyui_available(url):
              assert url, "URL not provided"
              
              print(f"🔍 Testando URL: {url}")
              response = requests.get(url, timeout=10)
              assert response.status_code == 200, f"ComfyUI not accessible: {response.status_code}"
              print(f"✅ ComfyUI is accessible at {url}")

          if __name__ == "__main__":
              url = sys.argv[1] if len(sys.argv) > 1 else None
              test_comfyui_available(url)
          EOF
          
          python test_comfyui_auto.py "$URL"

  # ============================================================
  # JOB 4: Generate AI Content (Automated)
  # ============================================================
  generate-content:
    name: 🎬 Generate AI Content
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, test-integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt || echo "requirements.txt not found"

      - name: 🎬 Run AI Film Pipeline
        env:
          COMFYUI_URL: ${{ needs.orchestrate-colab.outputs.comfyui_url }}
        run: |
          echo "🎬 Iniciando pipeline de geração de conteúdo..."
          echo "URL do ComfyUI: $COMFYUI_URL"
          
          # Aqui você pode chamar seu pipeline principal
          # Exemplo: python run_pipeline.py --comfyui-url "$COMFYUI_URL"
          
          echo "✅ Pipeline de conteúdo executado!"

  # ============================================================
  # JOB 5: Deploy to Kubernetes (Automated - Only on main)
  # ============================================================
  deploy-kubernetes:
    name: 🚢 Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, generate-content]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Kubernetes Secret
        run: |
          URL="${{ needs.orchestrate-colab.outputs.comfyui_url }}"
          echo "🔐 Atualizando secret do Kubernetes..."
          echo "URL: $URL"
          
          # Aqui você configuraria kubectl e atualizaria o secret
          # kubectl create secret generic comfyui-url --from-literal=url="$URL" --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ Secret atualizado (simulado)"

  # ============================================================
  # JOB 6: Notification (Automated)
  # ============================================================
  notify:
    name: 📢 Send Notification
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, generate-content]
    if: always()
    steps:
      - name: Send notification
        run: |
          STATUS="${{ needs.generate-content.result }}"
          URL="${{ needs.orchestrate-colab.outputs.comfyui_url }}"
          
          echo "📢 Enviando notificação..."
          echo "Status: $STATUS"
          echo "URL: $URL"
          
          # Aqui você pode enviar para Slack, Discord, etc
          # curl -X POST $WEBHOOK_URL -d "Pipeline status: $STATUS"
          
          echo "✅ Notificação enviada!"

  # ============================================================
  # JOB 7: Cleanup (Automated)
  # ============================================================
  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, generate-content, deploy-kubernetes]
    if: always()
    steps:
      - name: Cleanup temporary resources
        run: |
          echo "🧹 Limpando recursos temporários..."
          
          # Aqui você pode limpar recursos temporários
          # Exemplo: parar Colab se necessário, limpar caches, etc
          
          echo "✅ Limpeza concluída!"
