name: ü§ñ Full Auto Colab Pipeline (100% Automated)

on:
  push:
    branches: [main, develop, automation-only]
  workflow_dispatch:
    inputs:
      force_colab_restart:
        description: 'Force Colab restart'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================
  # JOB 1: Automated Colab Orchestration
  # ============================================================
  orchestrate-colab:
    name: ü§ñ Orchestrate Colab (Automated)
    runs-on: ubuntu-latest
    outputs:
      comfyui_url: ${{ steps.agent.outputs.comfyui_url }}
      colab_status: ${{ steps.agent.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install requests playwright playwright-stealth
          playwright install chromium
          playwright install-deps chromium

      - name: ü§ñ Run Colab Automation Agent
        id: agent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
          GOOGLE_PASSWORD: ${{ secrets.GOOGLE_PASSWORD }}
          GOOGLE_COLAB_CREDENTIALS: ${{ secrets.GOOGLE_COLAB_CREDENTIALS }}
          COLAB_NOTEBOOK_ID: ${{ secrets.COLAB_NOTEBOOK_ID }}
          COMFYUI_URL_GIST_ID: ${{ secrets.COMFYUI_URL_GIST_ID }}
          COLAB_TRIGGER_WEBHOOK: ${{ secrets.COLAB_TRIGGER_WEBHOOK }}
          COMFYUI_FALLBACK_URL: ${{ secrets.COMFYUI_FALLBACK_URL }}
        run: |
          echo "ü§ñ Iniciando Agente de Automa√ß√£o do Colab..."
          python .github/scripts/colab_automation_agent.py
          
          # Agente exporta URL automaticamente via GITHUB_OUTPUT
          echo "‚úÖ Agente executado com sucesso!"

      - name: Verify URL captured
        run: |
          URL="${{ steps.agent.outputs.comfyui_url }}"
          echo "üîç URL capturada: $URL"
          
          if [ -z "$URL" ]; then
            echo "‚ùå URL n√£o foi capturada pelo agente"
            exit 1
          fi
          
          echo "‚úÖ URL v√°lida capturada!"
          
          # Salvar URL em arquivo para outros jobs
          echo "$URL" > comfyui_url.txt
      
      - name: Upload URL artifact
        uses: actions/upload-artifact@v4
        with:
          name: comfyui-url
          path: comfyui_url.txt
          retention-days: 1

  # ============================================================
  # JOB 2: Update Configuration (Automated)
  # ============================================================
  update-config:
    name: ‚öôÔ∏è Update Configuration
    runs-on: ubuntu-latest
    needs: orchestrate-colab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download URL artifact
        uses: actions/download-artifact@v4
        with:
          name: comfyui-url

      - name: Update .env with Colab URL
        run: |
          URL=$(cat comfyui_url.txt)
          echo "üìù Atualizando configura√ß√µes com URL: $URL"
          
          # Criar/atualizar .env
          echo "COMFYUI_URL=$URL" > .env.auto
          echo "COMFYUI_SOURCE=colab_automated" >> .env.auto
          echo "UPDATED_AT=$(date)" >> .env.auto
          
          echo "‚úÖ Configura√ß√µes atualizadas!"

  # ============================================================
  # JOB 3: Run Integration Tests (Automated)
  # ============================================================
  test-integration:
    name: üß™ Run Integration Tests
    runs-on: ubuntu-latest
    needs: orchestrate-colab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download URL artifact
        uses: actions/download-artifact@v4
        with:
          name: comfyui-url

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install pytest requests

      - name: Test ComfyUI Integration
        run: |
          URL=$(cat comfyui_url.txt)
          echo "üß™ Testando integra√ß√£o com ComfyUI..."
          echo "URL: $URL"
          
          # Criar teste
          cat > test_comfyui_auto.py << 'EOF'
          import sys
          import requests

          def test_comfyui_available(url):
              assert url, "URL not provided"
              
              print(f"üîç Testando URL: {url}")
              response = requests.get(url, timeout=10)
              assert response.status_code == 200, f"ComfyUI not accessible: {response.status_code}"
              print(f"‚úÖ ComfyUI is accessible at {url}")

          if __name__ == "__main__":
              url = sys.argv[1] if len(sys.argv) > 1 else None
              test_comfyui_available(url)
          EOF
          
          python test_comfyui_auto.py "$URL"

  # ============================================================
  # JOB 4: Start Dagster + Flask Services (NEW!)
  # ============================================================
  start-services:
    name: üöÄ Start Dagster + Flask
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, test-integration]
    outputs:
      dagster_url: ${{ steps.services.outputs.dagster_url }}
      flask_url: ${{ steps.services.outputs.flask_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download ComfyUI URL artifact
        uses: actions/download-artifact@v4
        with:
          name: comfyui-url

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt || echo "No requirements.txt"
          pip install requests dagster dagster-webserver flask

      - name: Export ComfyUI URL to environment
        run: |
          COMFYUI_URL=$(cat comfyui_url.txt)
          echo "COMFYUI_URL=$COMFYUI_URL" >> $GITHUB_ENV
          echo "üì° ComfyUI URL: $COMFYUI_URL"

      - name: üöÄ Start Dagster + Flask Services
        id: services
        run: |
          echo "üöÄ Starting services..."
          
          python .github/scripts/start_services.py \
            --dagster-port 3000 \
            --flask-port 5001 \
            --wait \
            --max-wait 120
          
          echo "‚úÖ Services started successfully!"

  # ============================================================
  # JOB 5: Upload Story & Trigger Pipeline (NEW!)
  # ============================================================
  trigger-pipeline:
    name: üì§ Upload Story & Trigger
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, start-services]
    outputs:
      session_id: ${{ steps.upload.outputs.session_id }}
      upload_status: ${{ steps.upload.outputs.upload_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install requests

      - name: üì§ Upload Story File Automatically
        id: upload
        run: |
          FLASK_URL="${{ needs.start-services.outputs.flask_url }}"
          STORY_FILE="data/historia.txt"
          
          echo "üì§ Uploading story automatically..."
          echo "Flask URL: $FLASK_URL"
          echo "Story File: $STORY_FILE"
          
          python .github/scripts/upload_story_auto.py \
            --flask-url "$FLASK_URL" \
            --story-file "$STORY_FILE" \
            --method file \
            --retry 3 \
            --retry-delay 5
          
          echo "‚úÖ Story uploaded and pipeline triggered!"

      - name: ‚è≥ Monitor Pipeline Execution
        run: |
          SESSION_ID="${{ steps.upload.outputs.session_id }}"
          FLASK_URL="${{ needs.start-services.outputs.flask_url }}"
          
          echo "‚è≥ Monitoring pipeline execution..."
          echo "Session ID: $SESSION_ID"
          
          # Poll status for 30 minutes
          MAX_WAIT=1800
          INTERVAL=10
          ELAPSED=0
          
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            # Check if pipeline is still running
            # (You can implement status endpoint in Flask if needed)
            
            echo "‚è≥ Elapsed: ${ELAPSED}s / ${MAX_WAIT}s"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            
            # TODO: Add real status check when Flask status endpoint exists
            # For now, just wait for reasonable time
            if [ $ELAPSED -ge 600 ]; then
              echo "‚úÖ Pipeline has been running for 10 minutes"
              echo "üí° Assuming successful execution (add status endpoint for real monitoring)"
              break
            fi
          done
          
          echo "‚úÖ Pipeline monitoring complete!"

  # ============================================================
  # JOB 6: Deploy to Kubernetes (Automated - Only on main)
  # ============================================================
  deploy-kubernetes:
    name: üö¢ Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, trigger-pipeline]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Kubernetes Secret
        run: |
          URL="${{ needs.orchestrate-colab.outputs.comfyui_url }}"
          echo "üîê Atualizando secret do Kubernetes..."
          echo "URL: $URL"
          
          # Aqui voc√™ configuraria kubectl e atualizaria o secret
          # kubectl create secret generic comfyui-url --from-literal=url="$URL" --dry-run=client -o yaml | kubectl apply -f -
          
          echo "‚úÖ Secret atualizado (simulado)"

  # ============================================================
  # JOB 7: Notification (Automated)
  # ============================================================
  notify:
    name: üì¢ Send Notification
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, trigger-pipeline]
    if: always()
    steps:
      - name: Send notification
        run: |
          STATUS="${{ needs.trigger-pipeline.result }}"
          SESSION_ID="${{ needs.trigger-pipeline.outputs.session_id }}"
          
          echo "üì¢ Enviando notifica√ß√£o..."
          echo "Status: $STATUS"
          echo "URL: $URL"
          
          # Aqui voc√™ pode enviar para Slack, Discord, etc
          # curl -X POST $WEBHOOK_URL -d "Pipeline status: $STATUS"
          
          echo "‚úÖ Notifica√ß√£o enviada!"

  # ============================================================
  # JOB 8: Cleanup (Automated)
  # ============================================================
  cleanup:
    name: üßπ Cleanup Resources
    runs-on: ubuntu-latest
    needs: [orchestrate-colab, trigger-pipeline]
    if: always()
    steps:
      - name: Cleanup temporary resources
        run: |
          echo "üßπ Limpando recursos tempor√°rios..."
          
          # Aqui voc√™ pode limpar recursos tempor√°rios
          # Exemplo: parar Colab se necess√°rio, limpar caches, etc
          
          echo "‚úÖ Limpeza conclu√≠da!"
