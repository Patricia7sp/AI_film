name: AI Film Pipeline CI/CD

on:
  push:
    branches: [main, develop, feature/**]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_full_pipeline:
        description: 'Run full pipeline test'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.7.1'

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy pylint isort bandit safety
          pip install -r open3d_implementation/orchestration/requirements_dagster.txt

      - name: Run Black (Code Formatting)
        run: |
          black --check open3d_implementation/

      - name: Run isort (Import Sorting)
        run: |
          isort --check-only open3d_implementation/

      - name: Run Flake8 (Linting)
        run: |
          flake8 open3d_implementation/ --max-line-length=120 --extend-ignore=E203,W503

      - name: Run Pylint (Static Analysis)
        continue-on-error: true
        run: |
          pylint open3d_implementation/ --disable=C0111,C0103,R0913,R0914

      - name: Run Bandit (Security Check)
        run: |
          bandit -r open3d_implementation/ -ll

      - name: Run Safety (Dependency Security)
        run: |
          safety check --json

      - name: Type Checking with MyPy
        continue-on-error: true
        run: |
          mypy open3d_implementation/ --ignore-missing-imports

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-timeout
          pip install -r open3d_implementation/orchestration/requirements_dagster.txt

      - name: Run Unit Tests
        run: |
          cd open3d_implementation
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --maxfail=3 -n auto

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./open3d_implementation/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Integration Tests with ComfyUI
  integration-tests:
    name: Integration Tests (ComfyUI)
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || github.event.inputs.run_full_pipeline == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r open3d_implementation/orchestration/requirements_dagster.txt

      - name: Start ComfyUI via Colab (Automated)
        id: start-comfyui
        run: |
          # Script para iniciar Colab e obter URL
          python .github/scripts/start_colab_comfyui.py
        env:
          COLAB_NOTEBOOK_ID: ${{ secrets.COLAB_NOTEBOOK_ID }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Update ComfyUI Config
        run: |
          python open3d_implementation/scripts/update_comfyui_url.py "${{ steps.start-comfyui.outputs.comfyui_url }}"

      - name: Run Integration Tests
        run: |
          cd open3d_implementation/orchestration
          python test_dagster_integration_final.py

      - name: Stop ComfyUI (Cleanup)
        if: always()
        run: |
          python .github/scripts/stop_colab_comfyui.py

  # Job 4: Dagster Pipeline Tests
  dagster-tests:
    name: Dagster Pipeline Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dagster
        run: |
          python -m pip install --upgrade pip
          pip install -r open3d_implementation/orchestration/requirements_dagster.txt

      - name: Test Dagster Assets
        run: |
          cd open3d_implementation/orchestration
          python test_corrected_assets.py

      - name: Validate Dagster Definitions
        run: |
          cd open3d_implementation/orchestration
          dagster asset list

  # Job 5: Docker Build & Push (Optional)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: dagster-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./open3d_implementation
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/ai-film-pipeline:latest
            ghcr.io/${{ github.repository }}/ai-film-pipeline:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Terraform Plan (Infrastructure)
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          cd terraform/
          terraform init

      - name: Terraform Format Check
        run: |
          cd terraform/
          terraform fmt -check

      - name: Terraform Validate
        run: |
          cd terraform/
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform/
          terraform plan -out=tfplan
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

  # Job 7: Deploy to Kubernetes
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          kubectl cluster-info

      - name: Update ComfyUI URL
        run: |
          python .github/scripts/integrate_colab_comfyui.py

      - name: Deploy to Kubernetes
        run: |
          cd k8s/
          ./deploy.sh

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/dagster -n ai-film --timeout=5m
          kubectl rollout status deployment/langgraph -n ai-film --timeout=5m
          kubectl rollout status deployment/flask-upload -n ai-film --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get all -n ai-film
          kubectl get pvc -n ai-film

      - name: Deploy Notification
        if: always()
        run: |
          echo "âœ… Kubernetes deployment completed with status: ${{ job.status }}"

  # Job 8: Performance Tests
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install locust pytest-benchmark

      - name: Run Performance Tests
        run: |
          cd open3d_implementation/tests
          pytest test_performance.py --benchmark-only

      - name: Generate Performance Report
        run: |
          echo "Performance test results" > performance_report.txt

      - name: Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance_report.txt
