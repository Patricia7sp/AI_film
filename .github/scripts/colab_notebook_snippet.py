"""
ADICIONE ESTE C√ìDIGO AO FINAL DO SEU NOTEBOOK DO COLAB
https://colab.research.google.com/drive/1bfDjw5JGeqExdsUWYM41txvqlCGzOF99

Este c√≥digo captura a URL do Cloudflare e envia para o GitHub Actions
"""

import re
import time
import requests
import os

def capture_and_send_comfyui_url():
    """
    Captura URL do Cloudflare e envia para GitHub Actions
    """
    print("="*70)
    print("üé¨ CAPTURANDO URL DO COMFYUI PARA GITHUB ACTIONS")
    print("="*70)
    
    # 1. Aguardar cloudflared criar o t√∫nel
    print("\n‚è≥ Aguardando t√∫nel Cloudflare ser criado...")
    time.sleep(30)
    
    # 2. Ler log do cloudflared
    tunnel_url = None
    
    try:
        with open('/content/cloudflared.log', 'r') as f:
            log_content = f.read()
            
            # Procurar URL no log
            match = re.search(r'https://[a-z0-9-]+\.trycloudflare\.com', log_content)
            if match:
                tunnel_url = match.group(0)
                print(f"‚úÖ URL encontrada: {tunnel_url}")
            else:
                print("‚ö†Ô∏è URL n√£o encontrada no log")
    except Exception as e:
        print(f"‚ùå Erro ao ler log: {e}")
    
    if not tunnel_url:
        print("‚ùå N√£o foi poss√≠vel capturar URL")
        return
    
    # 3. Testar conectividade
    print(f"\nüß™ Testando conectividade: {tunnel_url}")
    try:
        response = requests.get(tunnel_url, timeout=10)
        if response.status_code == 200:
            print("‚úÖ ComfyUI est√° acess√≠vel!")
        else:
            print(f"‚ö†Ô∏è Status: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao testar: {e}")
    
    # 4. Salvar em arquivo (para GitHub Actions ler)
    try:
        with open('/content/comfyui_url.txt', 'w') as f:
            f.write(tunnel_url)
        print("‚úÖ URL salva em /content/comfyui_url.txt")
    except Exception as e:
        print(f"‚ùå Erro ao salvar arquivo: {e}")
    
    # 5. Enviar para webhook (se configurado)
    webhook_url = os.getenv('COMFYUI_WEBHOOK_URL')
    if webhook_url:
        try:
            response = requests.post(
                webhook_url,
                json={
                    "url": tunnel_url,
                    "notebook_id": "1bfDjw5JGeqExdsUWYM41txvqlCGzOF99",
                    "timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
                    "status": "ready"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                print("‚úÖ URL enviada para webhook")
            else:
                print(f"‚ö†Ô∏è Webhook retornou status {response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao enviar para webhook: {e}")
    else:
        print("‚ÑπÔ∏è Webhook n√£o configurado (opcional)")
    
    # 6. Exibir instru√ß√µes
    print("\n" + "="*70)
    print("‚úÖ CONFIGURA√á√ÉO COMPLETA!")
    print("="*70)
    print(f"\nüéØ ComfyUI URL: {tunnel_url}")
    print("\nüìã Para usar no GitHub Actions:")
    print("1. Configure o secret COMFYUI_FALLBACK_URL com esta URL")
    print("2. Ou configure um webhook para captura autom√°tica")
    print("\nüí° Esta URL √© v√°lida enquanto este notebook estiver rodando")
    print("="*70 + "\n")

# Executar automaticamente
capture_and_send_comfyui_url()
