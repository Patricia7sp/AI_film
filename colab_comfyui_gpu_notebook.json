{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 🎮 ComfyUI GPU Colab + Auto GitHub Integration\n",
        "\n",
        "## 📋 Setup Instructions\n",
        "\n",
        "1. **Runtime → Change runtime type → Hardware accelerator → GPU**\n",
        "2. **Runtime → Run all**\n",
        "3. **Copy Gist ID and configure GitHub secrets**\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#@title 🔧 Install ComfyUI\n",
        "import os\n",
        "import subprocess\n",
        "\n",
        "print(\"📦 Installing ComfyUI...\")\n",
        "\n",
        "# Clone ComfyUI\n",
        "if not os.path.exists('ComfyUI'):\n",
        "    !git clone https://github.com/comfyanonymous/ComfyUI.git\n",
        "    %cd ComfyUI\n",
        "    !pip install -r requirements.txt\n",
        "    !pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121\n",
        "    %cd ..\n",
        "\n",
        "print(\"✅ ComfyUI installed!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#@title 🚀 Start ComfyUI\n",
        "import subprocess\n",
        "import time\n",
        "\n",
        "print(\"🚀 Starting ComfyUI...\")\n",
        "\n",
        "# Start ComfyUI in background\n",
        "comfyui_proc = subprocess.Popen(\n",
        "    ['python', 'ComfyUI/main.py', '--listen', '--port', '8188'],\n",
        "    stdout=subprocess.PIPE,\n",
        "    stderr=subprocess.PIPE,\n",
        "    cwd='/content'\n",
        ")\n",
        "\n",
        "print(\"⏳ Waiting for ComfyUI to start...\")\n",
        "time.sleep(10)\n",
        "\n",
        "print(\"✅ ComfyUI started!\")\n",
        "print(f\"PID: {comfyui_proc.pid}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#@title 📡 Install Cloudflare Tunnel\n",
        "print(\"📡 Installing Cloudflare Tunnel...\")\n",
        "\n",
        "!curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\n",
        "!dpkg -i cloudflared.deb\n",
        "\n",
        "print(\"✅ Cloudflared installed!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#@title 🌐 Start Cloudflare Tunnel\n",
        "import subprocess\n",
        "import time\n",
        "\n",
        "print(\"🌐 Starting Cloudflare Tunnel...\")\n",
        "\n",
        "# Start cloudflared in background\n",
        "cloudflared_proc = subprocess.Popen(\n",
        "    ['nohup', 'cloudflared', 'tunnel', '--url', 'http://localhost:8188', '--no-autoupdate'],\n",
        "    stdout=open('/content/cloudflared.log', 'w'),\n",
        "    stderr=subprocess.STDOUT,\n",
        "    cwd='/content'\n",
        ")\n",
        "\n",
        "print(\"⏳ Waiting for tunnel to establish...\")\n",
        "time.sleep(15)\n",
        "\n",
        "print(\"✅ Cloudflare Tunnel started!\")\n",
        "print(f\"PID: {cloudflared_proc.pid}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#@title 🔍 Check Logs and Status\n",
        "import time\n",
        "\n",
        "print(\"🔍 Checking status...\")\n",
        "\n",
        "# Check ComfyUI\n",
        "print(\"\\n📊 ComfyUI Status:\")\n",
        "!ps aux | grep \"python main.py\"\n",
        "\n",
        "# Check Cloudflare\n",
        "print(\"\\n🌐 Cloudflare Status:\")\n",
        "!ps aux | grep cloudflared\n",
        "\n",
        "# Show recent logs\n",
        "print(\"\\n📝 Recent Cloudflare Logs:\")\n",
        "!tail -10 /content/cloudflared.log\n",
        "\n",
        "print(\"\\n⏳ Waiting 15 more seconds for tunnel to stabilize...\")\n",
        "time.sleep(15)\n",
        "\n",
        "print(\"📝 Updated Cloudflare Logs:\")\n",
        "!tail -10 /content/cloudflared.log"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#@title 🤖 Auto-Update ComfyUI URL to GitHub\n",
        "import re\n",
        "import time\n",
        "import requests\n",
        "import json\n",
        "\n",
        "def auto_update_comfyui_url():\n",
        "    \"\"\"Captura URL do ComfyUI e envia para GitHub Gist automaticamente\"\"\"\n",
        "    \n",
        "    # ⚠️ IMPORTANT: Replace with your GitHub token!\n",
        "    GITHUB_TOKEN = \"ghp_YOUR_TOKEN_HERE\"  # <-- UPDATE THIS!\n",
        "    \n",
        "    # Leave None for first run, then update with generated ID\n",
        "    GIST_ID = None  # <-- UPDATE THIS AFTER FIRST RUN!\n",
        "    \n",
        "    print(\"🎬 Capturing ComfyUI URL...\")\n",
        "    time.sleep(30)  # Wait for tunnel to stabilize\n",
        "    \n",
        "    # Capture URL from Cloudflare log\n",
        "    try:\n",
        "        with open('/content/cloudflared.log', 'r') as f:\n",
        "            log_content = f.read()\n",
        "            match = re.search(r'https://[a-z0-9-]+\\.trycloudflare\\.com', log_content)\n",
        "            url = match.group(0) if match else None\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error reading log: {e}\")\n",
        "        return\n",
        "    \n",
        "    if not url:\n",
        "        print(\"❌ URL not found in log\")\n",
        "        print(\"📝 Log content:\")\n",
        "        !tail -20 /content/cloudflared.log\n",
        "        return\n",
        "    \n",
        "    print(f\"✅ URL captured: {url}\")\n",
        "    \n",
        "    # Test URL accessibility\n",
        "    try:\n",
        "        response = requests.get(url, timeout=10)\n",
        "        if response.status_code == 200:\n",
        "            print(\"✅ URL is accessible!\")\n",
        "        else:\n",
        "            print(f\"⚠️ URL returned status {response.status_code}\")\n",
        "    except Exception as e:\n",
        "        print(f\"⚠️ Could not test URL: {e}\")\n",
        "    \n",
        "    # Create/Update Gist\n",
        "    headers = {\n",
        "        'Authorization': f'token {GITHUB_TOKEN}',\n",
        "        'Accept': 'application/vnd.github.v3+json'\n",
        "    }\n",
        "    \n",
        "    gist_data = {\n",
        "        \"description\": \"ComfyUI URL - AI Film Pipeline (Colab GPU)\",\n",
        "        \"public\": False,\n",
        "        \"files\": {\n",
        "            \"comfyui_url.json\": {\n",
        "                \"content\": json.dumps({\n",
        "                    \"url\": url,\n",
        "                    \"updated_at\": time.strftime('%Y-%m-%d %H:%M:%S'),\n",
        "                    \"status\": \"active\",\n",
        "                    \"source\": \"colab_gpu\",\n",
        "                    \"gpu_info\": \"colab_t4_free\"\n",
        "                }, indent=2)\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "    \n",
        "    try:\n",
        "        if GIST_ID:\n",
        "            # Update existing Gist\n",
        "            print(f\"🔄 Updating existing Gist: {GIST_ID}\")\n",
        "            response = requests.patch(\n",
        "                f'https://api.github.com/gists/{GIST_ID}',\n",
        "                headers=headers,\n",
        "                json=gist_data\n",
        "            )\n",
        "        else:\n",
        "            # Create new Gist\n",
        "            print(\"📝 Creating new Gist...\")\n",
        "            response = requests.post(\n",
        "                'https://api.github.com/gists',\n",
        "                headers=headers,\n",
        "                json=gist_data\n",
        "            )\n",
        "        \n",
        "        if response.status_code in [200, 201]:\n",
        "            gist_response = response.json()\n",
        "            gist_id = gist_response['id']\n",
        "            print(f\"✅ URL sent to Gist successfully!\")\n",
        "            print(f\"🔗 Gist URL: https://gist.github.com/{gist_id}\")\n",
        "            \n",
        "            if not GIST_ID:\n",
        "                print(f\"\\n⚠️ IMPORTANT - DO THIS NOW:\")\n",
        "                print(f\"1. Update GIST_ID = '{gist_id}' in this code\")\n",
        "                print(f\"2. Run in terminal:\")\n",
        "                print(f\"   gh secret set COMFYUI_URL_GIST_ID --body '{gist_id}'\")\n",
        "                print(f\"\\n📋 Copy this Gist ID: {gist_id}\")\n",
        "        else:\n",
        "            print(f\"❌ Error sending to Gist: {response.status_code}\")\n",
        "            print(f\"Response: {response.text}\")\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error communicating with GitHub: {e}\")\n",
        "\n",
        "# Execute\n",
        "auto_update_comfyui_url()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 🎯 **Next Steps**\n",
        "\n",
        "1. **Copy the Gist ID** from the output above\n",
        "2. **Configure GitHub secrets:**\n",
        "\n",
        "```bash\n",
        "# In your local terminal:\n",
        "cd /usr/local/anaconda3/Agentes_youtube/langgraph_system/LANGGRAPH_MCP\n",
        "gh secret set COMFYUI_URL_GIST_ID --body \"YOUR_GIST_ID_HERE\"\n",
        "```\n",
        "\n",
        "3. **Update this notebook:**\n",
        "   - Change `GIST_ID = None` to `GIST_ID = \"your-gist-id\"`\n",
        "   - Save the notebook\n",
        "\n",
        "4. **Test the pipeline:**\n",
        "\n",
        "```bash\n",
        "# Make a test commit\n",
        "git commit --allow-empty -m \"test: colab gpu integration\"\n",
        "git push origin main\n",
        "\n",
        "# Watch GitHub Actions\n",
        "gh run list --limit 3\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## 📊 **Monitor**\n",
        "\n",
        "- **ComfyUI Web UI:** [http://localhost:8188](http://localhost:8188)\n",
        "- **Public URL:** Check the Gist or cloudflared.log\n",
        "- **GitHub Actions:** [Actions Tab](https://github.com/Patricia7sp/AI_film/actions)\n",
        "\n",
        "---\n",
        "\n",
        "## 💡 **Tips**\n",
        "\n",
        "- Keep this Colab tab open (GPU available ~12 hours)\n",
        "- The tunnel URL updates automatically on each run\n",
        "- GitHub Actions will use the latest URL from the Gist\n",
        "- If Colab disconnects, just Run All again"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
